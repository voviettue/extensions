diff --git a/node_modules/@directus/extensions-sdk/dist/cjs/cli/commands/build.js b/node_modules/@directus/extensions-sdk/dist/cjs/cli/commands/build.js
index f167e38..ed2428a 100644
--- a/node_modules/@directus/extensions-sdk/dist/cjs/cli/commands/build.js
+++ b/node_modules/@directus/extensions-sdk/dist/cjs/cli/commands/build.js
@@ -18,92 +18,261 @@ const rollup_plugin_styles_1 = __importDefault(require("rollup-plugin-styles"));
 const rollup_plugin_vue_1 = __importDefault(require("rollup-plugin-vue"));
 const constants_1 = require("@directus/shared/constants");
 const utils_1 = require("@directus/shared/utils");
-const logger_1 = __importDefault(require("../utils/logger"));
+const logger_1 = require("../utils/logger");
 const languages_1 = require("../utils/languages");
 const load_config_1 = __importDefault(require("../utils/load-config"));
+const to_object_1 = __importDefault(require("../utils/to-object"));
 async function build(options) {
-    var _a, _b;
-    const packagePath = path_1.default.resolve('package.json');
-    let extensionManifest = {};
-    if (!(await fs_extra_1.default.pathExists(packagePath))) {
-        (0, logger_1.default)(`Current directory is not a package.`, !options.force ? 'error' : 'warn');
-        if (!options.force)
+    var _a, _b, _c;
+    const watch = (_a = options.watch) !== null && _a !== void 0 ? _a : false;
+    const sourcemap = (_b = options.sourcemap) !== null && _b !== void 0 ? _b : false;
+    const minify = (_c = options.minify) !== null && _c !== void 0 ? _c : false;
+    if (!options.type && !options.input && !options.output) {
+        const packagePath = path_1.default.resolve('package.json');
+        let extensionManifest = {};
+        if (!(await fs_extra_1.default.pathExists(packagePath))) {
+            (0, logger_1.log)(`Current directory is not a valid package.`, 'error');
             process.exit(1);
+        }
+        else {
+            extensionManifest = await fs_extra_1.default.readJSON(packagePath);
+            if (!(0, utils_1.validateExtensionManifest)(extensionManifest)) {
+                (0, logger_1.log)(`Current directory is not a valid Directus extension.`, 'error');
+                process.exit(1);
+            }
+        }
+        const extensionOptions = extensionManifest[constants_1.EXTENSION_PKG_KEY];
+        if (!(0, utils_1.isTypeIn)(extensionOptions, constants_1.EXTENSION_TYPES)) {
+            (0, logger_1.log)(`Extension type ${chalk_1.default.bold(extensionOptions.type)} is not supported. Available extension types: ${constants_1.EXTENSION_TYPES.map((t) => chalk_1.default.bold.magenta(t)).join(', ')}.`, 'error');
+            process.exit(1);
+        }
+        if ((0, utils_1.isTypeIn)(extensionOptions, constants_1.HYBRID_EXTENSION_TYPES)) {
+            await buildHybridExtension({
+                inputApp: extensionOptions.source.app,
+                inputApi: extensionOptions.source.api,
+                outputApp: extensionOptions.path.app,
+                outputApi: extensionOptions.path.api,
+                watch,
+                sourcemap,
+                minify,
+            });
+        }
+        else {
+            await buildAppOrApiExtension({
+                type: extensionOptions.type,
+                input: extensionOptions.source,
+                output: extensionOptions.path,
+                watch,
+                sourcemap,
+                minify,
+            });
+        }
     }
     else {
-        extensionManifest = await fs_extra_1.default.readJSON(packagePath);
-        if (!(0, utils_1.validateExtensionManifest)(extensionManifest)) {
-            (0, logger_1.default)(`Current directory is not a Directus extension.`, !options.force ? 'error' : 'warn');
-            if (!options.force)
+        const type = options.type;
+        const input = options.input;
+        const output = options.output;
+        if (!type) {
+            (0, logger_1.log)(`Extension type has to be specified using the ${chalk_1.default.blue('[-t, --type <type>]')} option.`, 'error');
+            process.exit(1);
+        }
+        else if (!(0, utils_1.isIn)(type, constants_1.EXTENSION_TYPES)) {
+            (0, logger_1.log)(`Extension type ${chalk_1.default.bold(type)} is not supported. Available extension types: ${constants_1.EXTENSION_TYPES.map((t) => chalk_1.default.bold.magenta(t)).join(', ')}.`, 'error');
+            process.exit(1);
+        }
+        if (!input) {
+            (0, logger_1.log)(`Extension entrypoint has to be specified using the ${chalk_1.default.blue('[-i, --input <file>]')} option.`, 'error');
+            process.exit(1);
+        }
+        if (!output) {
+            (0, logger_1.log)(`Extension output file has to be specified using the ${chalk_1.default.blue('[-o, --output <file>]')} option.`, 'error');
+            process.exit(1);
+        }
+        if ((0, utils_1.isIn)(type, constants_1.HYBRID_EXTENSION_TYPES)) {
+            const inputObject = (0, to_object_1.default)(input);
+            const outputObject = (0, to_object_1.default)(output);
+            if (!inputObject || !inputObject.app || !inputObject.api) {
+                (0, logger_1.log)(`Input option needs to be of the format ${chalk_1.default.blue('[-i app:<app-entrypoint>,api:<api-entrypoint>]')}.`, 'error');
+                process.exit(1);
+            }
+            if (!outputObject || !outputObject.app || !outputObject.api) {
+                (0, logger_1.log)(`Output option needs to be of the format ${chalk_1.default.blue('[-o app:<app-output-file>,api:<api-output-file>]')}.`, 'error');
                 process.exit(1);
+            }
+            await buildHybridExtension({
+                inputApp: inputObject.app,
+                inputApi: inputObject.api,
+                outputApp: outputObject.app,
+                outputApi: outputObject.api,
+                watch,
+                sourcemap,
+                minify,
+            });
+        }
+        else {
+            await buildAppOrApiExtension({
+                type,
+                input,
+                output,
+                watch,
+                sourcemap,
+                minify,
+            });
         }
     }
-    const extensionOptions = extensionManifest[constants_1.EXTENSION_PKG_KEY];
-    const type = options.type || (extensionOptions === null || extensionOptions === void 0 ? void 0 : extensionOptions.type);
-    if (!type || !(0, utils_1.isExtension)(type)) {
-        (0, logger_1.default)(`Extension type ${chalk_1.default.bold(type)} does not exist. Available extension types: ${constants_1.EXTENSION_TYPES.map((t) => chalk_1.default.bold.magenta(t)).join(', ')}.`, 'error');
+}
+exports.default = build;
+async function buildAppOrApiExtension({ type, input, output, watch, sourcemap, minify, }) {
+    var _a;
+    if (!(await fs_extra_1.default.pathExists(input)) || !(await fs_extra_1.default.stat(input)).isFile()) {
+        (0, logger_1.log)(`Entrypoint ${chalk_1.default.bold(input)} does not exist.`, 'error');
         process.exit(1);
     }
-    const input = options.input || ((_a = extensionOptions) === null || _a === void 0 ? void 0 : _a.source);
-    const output = options.output || ((_b = extensionOptions) === null || _b === void 0 ? void 0 : _b.path);
-    if (!input || !(await fs_extra_1.default.pathExists(input)) || !(await fs_extra_1.default.stat(input)).isFile()) {
-        (0, logger_1.default)(`Entrypoint ${chalk_1.default.bold(input)} does not exist.`, 'error');
+    if (output.length === 0) {
+        (0, logger_1.log)(`Output file ${chalk_1.default.bold(output)} must be a valid path.`, 'error');
         process.exit(1);
     }
-    if (!output) {
-        (0, logger_1.default)(`Output file must be a valid path.`, 'error');
+    const language = (0, languages_1.getLanguageFromPath)(input);
+    if (!(0, languages_1.isLanguage)(language)) {
+        (0, logger_1.log)(`Language ${chalk_1.default.bold(language)} is not supported.`, 'error');
         process.exit(1);
     }
-    const language = options.language || (0, languages_1.getLanguageFromPath)(input);
-    if (!(0, languages_1.isLanguage)(language)) {
-        (0, logger_1.default)(`Language ${chalk_1.default.bold(language)} is not supported.`, 'error');
+    const config = await (0, load_config_1.default)();
+    const plugins = (_a = config.plugins) !== null && _a !== void 0 ? _a : [];
+    const mode = (0, utils_1.isIn)(type, constants_1.APP_EXTENSION_TYPES) ? 'browser' : 'node';
+    const rollupOptions = getRollupOptions({ mode, input, language, sourcemap, minify, plugins });
+    const rollupOutputOptions = getRollupOutputOptions({ mode, output, sourcemap });
+    if (watch) {
+        await watchExtension({ rollupOptions, rollupOutputOptions });
+    }
+    else {
+        await buildExtension({ rollupOptions, rollupOutputOptions });
+    }
+}
+async function buildHybridExtension({ inputApp, inputApi, outputApp, outputApi, watch, sourcemap, minify, }) {
+    var _a;
+    if (!(await fs_extra_1.default.pathExists(inputApp)) || !(await fs_extra_1.default.stat(inputApp)).isFile()) {
+        (0, logger_1.log)(`App entrypoint ${chalk_1.default.bold(inputApp)} does not exist.`, 'error');
+        process.exit(1);
+    }
+    if (!(await fs_extra_1.default.pathExists(inputApi)) || !(await fs_extra_1.default.stat(inputApi)).isFile()) {
+        (0, logger_1.log)(`API entrypoint ${chalk_1.default.bold(inputApi)} does not exist.`, 'error');
+        process.exit(1);
+    }
+    if (outputApp.length === 0) {
+        (0, logger_1.log)(`App output file ${chalk_1.default.bold(outputApp)} must be a valid path.`, 'error');
+        process.exit(1);
+    }
+    if (outputApi.length === 0) {
+        (0, logger_1.log)(`API output file ${chalk_1.default.bold(outputApi)} must be a valid path.`, 'error');
+        process.exit(1);
+    }
+    const languageApp = (0, languages_1.getLanguageFromPath)(inputApp);
+    const languageApi = (0, languages_1.getLanguageFromPath)(inputApi);
+    if (!(0, languages_1.isLanguage)(languageApp)) {
+        (0, logger_1.log)(`App language ${chalk_1.default.bold(languageApp)} is not supported.`, 'error');
+        process.exit(1);
+    }
+    if (!(0, languages_1.isLanguage)(languageApi)) {
+        (0, logger_1.log)(`API language ${chalk_1.default.bold(languageApp)} is not supported.`, 'error');
         process.exit(1);
     }
     const config = await (0, load_config_1.default)();
-    const spinner = (0, ora_1.default)('Building Directus extension...').start();
-    const rollupOptions = getRollupOptions(type, language, input, config.plugins, options);
-    const rollupOutputOptions = getRollupOutputOptions(type, output, options);
-    if (options.watch) {
+    const plugins = (_a = config.plugins) !== null && _a !== void 0 ? _a : [];
+    const rollupOptionsApp = getRollupOptions({
+        mode: 'browser',
+        input: inputApp,
+        language: languageApp,
+        sourcemap,
+        minify,
+        plugins,
+    });
+    const rollupOptionsApi = getRollupOptions({
+        mode: 'node',
+        input: inputApi,
+        language: languageApi,
+        sourcemap,
+        minify,
+        plugins,
+    });
+    const rollupOutputOptionsApp = getRollupOutputOptions({ mode: 'browser', output: outputApp, sourcemap });
+    const rollupOutputOptionsApi = getRollupOutputOptions({ mode: 'node', output: outputApi, sourcemap });
+    const rollupOptionsAll = [
+        { rollupOptions: rollupOptionsApp, rollupOutputOptions: rollupOutputOptionsApp },
+        { rollupOptions: rollupOptionsApi, rollupOutputOptions: rollupOutputOptionsApi },
+    ];
+    if (watch) {
+        await watchExtension(rollupOptionsAll);
+    }
+    else {
+        await buildExtension(rollupOptionsAll);
+    }
+}
+async function buildExtension(config) {
+    const configs = Array.isArray(config) ? config : [config];
+    const spinner = (0, ora_1.default)(chalk_1.default.bold('Building Directus extension...')).start();
+    const result = await Promise.all(configs.map(async (c) => {
+        try {
+            const bundle = await (0, rollup_1.rollup)(c.rollupOptions);
+            await bundle.write(c.rollupOutputOptions);
+            await bundle.close();
+        }
+        catch (error) {
+            return formatRollupError(error);
+        }
+        return null;
+    }));
+    const resultErrors = result.filter((r) => r !== null);
+    if (resultErrors.length > 0) {
+        spinner.fail(chalk_1.default.bold('Failed'));
+        (0, logger_1.log)(resultErrors.join('\n\n'));
+        process.exit(1);
+    }
+    else {
+        spinner.succeed(chalk_1.default.bold('Done'));
+    }
+}
+async function watchExtension(config) {
+    const configs = Array.isArray(config) ? config : [config];
+    const spinner = (0, ora_1.default)(chalk_1.default.bold('Building Directus extension...'));
+    let buildCount = 0;
+    for (const c of configs) {
         const watcher = (0, rollup_1.watch)({
-            ...rollupOptions,
-            output: rollupOutputOptions,
+            ...c.rollupOptions,
+            output: c.rollupOutputOptions,
         });
         watcher.on('event', async (event) => {
             switch (event.code) {
-                case 'ERROR': {
-                    spinner.fail(chalk_1.default.bold('Failed'));
-                    handleRollupError(event.error);
-                    spinner.start(chalk_1.default.bold('Watching files for changes...'));
+                case 'BUNDLE_START':
+                    if (buildCount === 0) {
+                        (0, logger_1.clear)();
+                        spinner.start();
+                    }
+                    buildCount++;
                     break;
-                }
                 case 'BUNDLE_END':
                     await event.result.close();
-                    spinner.succeed(chalk_1.default.bold('Done'));
-                    spinner.start(chalk_1.default.bold('Watching files for changes...'));
+                    buildCount--;
+                    if (buildCount === 0) {
+                        spinner.succeed(chalk_1.default.bold('Done'));
+                        (0, logger_1.log)(chalk_1.default.bold.green('Watching files for changes...'));
+                    }
                     break;
-                case 'BUNDLE_START':
-                    spinner.text = 'Building Directus extension...';
+                case 'ERROR': {
+                    buildCount--;
+                    spinner.fail(chalk_1.default.bold('Failed'));
+                    (0, logger_1.log)(formatRollupError(event.error));
+                    if (buildCount > 0) {
+                        spinner.start();
+                    }
                     break;
+                }
             }
         });
     }
-    else {
-        try {
-            const bundle = await (0, rollup_1.rollup)(rollupOptions);
-            await bundle.write(rollupOutputOptions);
-            await bundle.close();
-            spinner.succeed(chalk_1.default.bold('Done'));
-        }
-        catch (error) {
-            spinner.fail(chalk_1.default.bold('Failed'));
-            handleRollupError(error);
-            process.exitCode = 1;
-        }
-    }
 }
-exports.default = build;
-function getRollupOptions(type, language, input, plugins = [], options) {
-    if ((0, utils_1.isAppExtension)(type)) {
+function getRollupOptions({ mode, input, language, sourcemap, minify, plugins, }) {
+    if (mode === 'browser') {
         return {
             input,
             external: constants_1.APP_SHARED_DEPS,
@@ -113,7 +282,7 @@ function getRollupOptions(type, language, input, plugins = [], options) {
                 (0, rollup_plugin_styles_1.default)(),
                 ...plugins,
                 (0, plugin_node_resolve_1.nodeResolve)({ browser: true }),
-                (0, plugin_commonjs_1.default)({ esmExternals: true, sourceMap: options.sourcemap }),
+                (0, plugin_commonjs_1.default)({ esmExternals: true, sourceMap: sourcemap }),
                 (0, plugin_json_1.default)(),
                 (0, plugin_replace_1.default)({
                     values: {
@@ -121,7 +290,7 @@ function getRollupOptions(type, language, input, plugins = [], options) {
                     },
                     preventAssignment: true,
                 }),
-                options.minify ? (0, rollup_plugin_terser_1.terser)() : null,
+                minify ? (0, rollup_plugin_terser_1.terser)() : null,
             ],
         };
     }
@@ -133,7 +302,7 @@ function getRollupOptions(type, language, input, plugins = [], options) {
                 language === 'typescript' ? (0, rollup_plugin_typescript2_1.default)({ check: false }) : null,
                 ...plugins,
                 (0, plugin_node_resolve_1.nodeResolve)(),
-                (0, plugin_commonjs_1.default)({ sourceMap: options.sourcemap }),
+                (0, plugin_commonjs_1.default)({ sourceMap: sourcemap }),
                 (0, plugin_json_1.default)(),
                 (0, plugin_replace_1.default)({
                     values: {
@@ -141,18 +310,18 @@ function getRollupOptions(type, language, input, plugins = [], options) {
                     },
                     preventAssignment: true,
                 }),
-                options.minify ? (0, rollup_plugin_terser_1.terser)() : null,
+                minify ? (0, rollup_plugin_terser_1.terser)() : null,
             ],
         };
     }
 }
-function getRollupOutputOptions(type, output, options) {
-    if ((0, utils_1.isAppExtension)(type)) {
+function getRollupOutputOptions({ mode, output, sourcemap, }) {
+    if (mode === 'browser') {
         return {
             file: output,
             format: 'es',
             inlineDynamicImports: true,
-            sourcemap: options.sourcemap,
+            sourcemap,
         };
     }
     else {
@@ -161,26 +330,28 @@ function getRollupOutputOptions(type, output, options) {
             format: 'cjs',
             exports: 'default',
             inlineDynamicImports: true,
-            sourcemap: options.sourcemap,
+            sourcemap,
         };
     }
 }
-function handleRollupError(error) {
-    const pluginPrefix = error.plugin ? `(plugin ${error.plugin}) ` : '';
-    (0, logger_1.default)('\n' + chalk_1.default.red.bold(`${pluginPrefix}${error.name}: ${error.message}`));
+function formatRollupError(error) {
+    var _a;
+    let message = '';
+    message += `${chalk_1.default.bold.red(`[${error.name}]`)} ${error.message}${error.plugin ? ` (plugin ${error.plugin})` : ''}\n`;
     if (error.url) {
-        (0, logger_1.default)(chalk_1.default.cyan(error.url), 'error');
+        message += '\n' + chalk_1.default.green(error.url);
     }
     if (error.loc) {
-        (0, logger_1.default)(`${(error.loc.file || error.id)} (${error.loc.line}:${error.loc.column})`);
+        message += '\n' + chalk_1.default.green(`${(_a = error.loc.file) !== null && _a !== void 0 ? _a : error.id}:${error.loc.line}:${error.loc.column}`);
     }
     else if (error.id) {
-        (0, logger_1.default)(error.id);
+        message += '\n' + chalk_1.default.green(error.id);
     }
     if (error.frame) {
-        (0, logger_1.default)(chalk_1.default.dim(error.frame));
+        message += '\n' + chalk_1.default.dim(error.frame);
     }
     if (error.stack) {
-        (0, logger_1.default)(chalk_1.default.dim(error.stack));
+        message += '\n' + chalk_1.default.dim(error.stack);
     }
+    return message;
 }
diff --git a/node_modules/@directus/extensions-sdk/dist/cjs/cli/utils/logger.js b/node_modules/@directus/extensions-sdk/dist/cjs/cli/utils/logger.js
index a64e57e..1fa44ec 100644
--- a/node_modules/@directus/extensions-sdk/dist/cjs/cli/utils/logger.js
+++ b/node_modules/@directus/extensions-sdk/dist/cjs/cli/utils/logger.js
@@ -4,6 +4,8 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
+exports.clear = exports.log = void 0;
+const readline_1 = __importDefault(require("readline"));
 const chalk_1 = __importDefault(require("chalk"));
 function log(message, type) {
     if (type === 'info') {
@@ -19,4 +21,12 @@ function log(message, type) {
         console.log(message);
     }
 }
-exports.default = log;
+exports.log = log;
+function clear() {
+    const repeatCount = process.stdout.rows - 2;
+    const blank = repeatCount > 0 ? '\n'.repeat(repeatCount) : '';
+    console.log(blank);
+    readline_1.default.cursorTo(process.stdout, 0, 0);
+    readline_1.default.clearScreenDown(process.stdout);
+}
+exports.clear = clear;
diff --git a/node_modules/@directus/extensions-sdk/dist/cjs/cli/utils/to-object.js b/node_modules/@directus/extensions-sdk/dist/cjs/cli/utils/to-object.js
new file mode 100644
index 0000000..6bd444c
--- /dev/null
+++ b/node_modules/@directus/extensions-sdk/dist/cjs/cli/utils/to-object.js
@@ -0,0 +1,17 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+function toObject(val) {
+    const arr = val.split(',');
+    const obj = {};
+    for (const v of arr) {
+        const sub = v.match(/^([^:]+):(.+)$/);
+        if (sub) {
+            obj[sub[1]] = sub[2];
+        }
+        else {
+            return null;
+        }
+    }
+    return obj;
+}
+exports.default = toObject;
